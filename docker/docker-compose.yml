version: "3.8"

services:
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=false
      - OLLAMA_BASE=http://ollama:11434
      - OLLAMA_EMBED_MODEL=mxbai-embed-large
      - OLLAMA_CHAT_MODEL=gemma3:4b
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_COLLECTION=documents
      - NODE_FUNCTION_ALLOW_BUILTIN=crypto
      - TEI_URL=http://tei:80
      - N8N_CORS_ALLOW_ORIGIN=https://tts.micky.codes
    depends_on: [tei, qdrant, ollama]
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app-net
    restart: unless-stopped

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama:/root/.ollama
    restart: unless-stopped

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    restart: unless-stopped

  tei:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-latest
    environment:
      - MODEL_ID=sentence-transformers/all-distilroberta-v1
      - HF_ENDPOINT=https://huggingface.co
      - HUGGINGFACE_HUB_CACHE=/data/tei-cache
    ports:
      - "8080:80"
    volumes:
      - tei-cache:/data/tei-cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost | grep -q embeddings || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30

  backend:
    build: ./backend
    image: tts_backend
    container_name: tts_backend
    ports:
      - "8000:8000"
    depends_on:
      - db
    networks:
      - app-net
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - ./static:/app/static
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility

  frontend:
    build: ./frontend
    image: tts_frontend
    container_name: tts_frontend
    ports:
      - "3000:3000"
    networks:
      - app-net
    env_file:
      - ./frontend/.env
    restart: always

  db:
    image: mysql:8.4.4
    networks:
      - app-net
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always

#  ngrok:
#    image: ngrok/ngrok:latest
#    restart: unless-stopped
#    command: http backend:8000
#    networks:
#      - app-net
#    environment:
#      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
#    depends_on:
#      - backend
#    ports:
#      - "4040:4040"

#  webhook_updater:
#    build: ./scripts
#    image: webhook_updater
#    container_name: webhook_updater
#    command: python set_webhook.py
#    depends_on:
#      - ngrok
#    networks:
#      - app-net
#    environment:
#      LINE_CHANNEL_ACCESS_TOKEN: ${LINE_CHANNEL_ACCESS_TOKEN}

volumes:
  n8n_data:
  ollama:
  qdrant_storage:
  tei-cache:
  mysql-data:

networks:
  app-net: